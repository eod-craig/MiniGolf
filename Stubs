/*
 * Outline and tsub methods for unit testing of mini golf course application onject Round()
 */
package minigolf;

/**
 *
 * @author Zachary Gay, Alex Priest, Adam Craig.
 */
public class MiniGolf {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }
 
    
    class Round
    {//All propertys are strings and can be convert when needed.
    //Couse Name property
    private String courseName;
    public String getcourseName() {
        return courseName;
    }
    public void setcourseName(String value) {
        this.courseName = value;
    }
    //Player Name Property
    private String playerName;
    public String getplayerName() {
        return playerName;
    }
    public void setplayerName(String value) {
        this.playerName = value;
    }
    //Time the round start property
    private String timeStart;
    public String gettimeStart() {
        return timeStart;
    }
    public void settimeStart(String value) {
        this.timeStart = value;
    }
    //Time the round ends property
    private String timeEnd;
    public String gettimeEnd() {
        return timeEnd;
    }
    public void settimeEnd(String value) {
        this.timeEnd = value;
    }
        
        public int currentScore()
        {
         /*Display the user's score so far (this is the number 
          *of strokes above or below par, for the holes played so far)
           */
            
            //Display score in a custom developed messagebox.
            //Get the par value of the hole from a collection of par numbers
                   
        return '3';
        }
        
        public int numberOfHolesPlayed () 
        {
            //Returns the number of completed holes in this round;
            
            //Should retrieve this value Player hole collection
            return '5';
        }
        
        public void  enterScore(int strokes)
        {
         /* Enter a score for the next hole.  
          *(Note the current design doesn't allow a player to skip holes, 
          * they must be played in order);  
          */
        //Enters the strokes from the user entered value to Collection.
        }
        
        public int[] scoredetial()
        {  /*
            *Returns the array of strokes per hole.  
            *This method gets called by the final hole's swipe-station, to print 
            *out the players scorecard 
            *(which has pre-printed coupons reverse side.)
            *After this method is invoked the round object can be disposed of.
            */
            int[] Array = {1,2,3,4};
            return Array;
        }
    }
}
